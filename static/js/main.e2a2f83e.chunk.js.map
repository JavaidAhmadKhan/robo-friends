{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2a2f83e.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"CardList\");\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  console.log(\"SearchBox\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-light-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops! That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n  updateCount = () => {\n    this.setState((state) => {\n      return { count: this.state.count + 1 };\n    });\n  };\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\"> RoboFriends </h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1> Loading </h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />{\" \"}\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />{\" \"}\r\n          </ErrorBoundry>\r\n        </Scroll>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\n\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  console.log(action.type);\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}